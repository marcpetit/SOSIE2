package com.architecture.logicielle.mvc.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.Ordered;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

import com.architecture.logicielle.mvc.data.UserView;
import com.architecture.logicielle.repository.UserRepository;
import com.architecture.logicielle.repository.entities.UserEntity;
import com.architecture.logicielle.service.UserService;

import com.architecture.logicielle.service.UserServiceImpl;

@Controller
public class WebController extends WebMvcConfigurerAdapter {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	private UserService userService = new UserServiceImpl();

	@Override
	public void addViewControllers(ViewControllerRegistry registry) {
		registry.addViewController("/login").setViewName("login");
		registry.setOrder(Ordered.HIGHEST_PRECEDENCE);
	}

	@GetMapping("/")
	public String showHomePage(Model model) {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		User user = (User)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		System.out.println("Username = " + user.getUsername());
		System.out.println("Password = " + user.getPassword());

		//Long id = Long.parseLong(auth.getName());
		UserEntity userEnt = userService.GetUserById((long)1, userRepository);
		UserView userView = userService.parseUserEntityToUserView(userEnt);
		model.addAttribute("userView", userView);
		System.out.println("GET ON /");
		return "consultUser";
	}

	@GetMapping("/inscription")
	public String showFromInscription(Model model) {
		model.addAttribute("user", new UserView());
		System.out.println("GET ON inscription");

		return "inscription";
	}

	@PostMapping("/inscription")
	public String InscriptionSubmit(Model model, @ModelAttribute @Valid UserView user, BindingResult bindingResult) {
		model.addAttribute("user", user);
		System.out.println("POST ON inscription");

		if (bindingResult.hasErrors()) {
			model.addAttribute("ErrorMessage", "Inalid from !");
			return "inscription";
		} else {
			UserEntity userEnt = userService.parseUserViewToUserEntity(user);
			UserEntity userEntCheck = userService.checkUser(userEnt, userRepository);
			if (userEntCheck == null) {
				userService.saveUser(userEnt, userRepository);
			} else {
				model.addAttribute("ErrorMessage", "User Exist !");
				return "inscription";
			}

			return "redirect:/";
		}
	}
	
	@GetMapping("/edit")
	public String showEditPage(Model model) {
		System.out.println("GET ON edit");
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		Long id = Long.parseLong(auth.getName());
		UserEntity userEnt = userService.GetUserById(id, userRepository);
		UserView userView = userService.parseUserEntityToUserView(userEnt);
		model.addAttribute("user", userView);
		return "editUser";
	}

	@PostMapping("/edit")
	public String EditProfileSubmit(Model model, @ModelAttribute @Valid UserView user,
			BindingResult bindingResult) {
		
		System.out.println("POST ON edit");


		model.addAttribute("user", user);
		if (bindingResult.hasErrors()) {
			model.addAttribute("ErrorMessage", "Inalid from !");
			return "editUser";
		} else {
			UserEntity userEnt = userService.parseUserViewToUserEntity(user);
			userService.saveUser(userEnt, userRepository);
			return "redirect:/";
		}
	}

	@GetMapping("/DeleteProfile/{userId}")
	public String DeleteUsert(@PathVariable Long userId, Model model, @ModelAttribute UserView user) {
		// fermer la session avant de supprimer le user
		SecurityContextHolder.clearContext();
		UserEntity userEnt = userService.GetUserById(userId, userRepository);
		userService.deleteUser(userEnt, userRepository);

		return "redirect:/login";
	}

}
