package com.architecture.logicielle.mvc.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.Ordered;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

import com.architecture.logicielle.mvc.data.UserView;
import com.architecture.logicielle.mvc.data.PromoView;
import com.architecture.logicielle.repository.PromoRepository;
import com.architecture.logicielle.repository.UserRepository;
import com.architecture.logicielle.repository.entities.PromoEntity;
import com.architecture.logicielle.repository.entities.UserEntity;
import com.architecture.logicielle.service.PromoService;
import com.architecture.logicielle.service.PromoServiceImpl;
import com.architecture.logicielle.service.UserService;

import com.architecture.logicielle.service.UserServiceImpl;

@Controller
public class WebController extends WebMvcConfigurerAdapter {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	private UserService userService = new UserServiceImpl();
	@Autowired
	private PromoRepository promoRepository;
	private PromoService promoService = new PromoServiceImpl();

	@Override
	public void addViewControllers(ViewControllerRegistry registry) {
		registry.addViewController("/login").setViewName("login");
		registry.setOrder(Ordered.HIGHEST_PRECEDENCE);
	}

	@GetMapping("/")
	public String showHomePage(Model model) {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		UserEntity userEnt = userService.GetUserByEmail(auth.getName(), userRepository);
		UserView userView = userService.parseUserEntityToUserView(userEnt);
		model.addAttribute("userView", userView);
		return "consultUser";
	}
	
	@GetMapping("/createPromo")
	public String showFormCreatePromo(Model model) {
		model.addAttribute("promo", new PromoView());
		
		return "createPromo";
	}
	
	@PostMapping("/createPromo")
	public String CreatePromoSubmit(Model model, @ModelAttribute @Valid PromoView promoView, BindingResult bindingResult) {
		
		if (bindingResult.hasErrors()) {
			model.addAttribute("ErrorMessage", "Invalid form!");
		} else {
			PromoEntity promoEntity = promoService.parsePromoViewToPromoEntity(promoView);
			PromoEntity promoEntityCheck = promoService.checkPromo(promoEntity, promoRepository);
			
			if (promoEntityCheck == null) {
				promoService.savePromo(promoEntity, promoRepository);
			} else {
				model.addAttribute("ErrorMessage", "This promo already exists!");
				return "createPromo";
			}
		}
		return "redirect:/login";
	}

	
	@GetMapping("/inscription")
	public String showFromInscription(Model model) {
		model.addAttribute("user", new UserView());
		System.out.println("GET ON inscription");

		return "inscription";
	}

	@PostMapping("/inscription")
	public String InscriptionSubmit(Model model, @ModelAttribute @Valid UserView user, BindingResult bindingResult) {
		model.addAttribute("user", user);
		System.out.println("POST ON inscription");
		System.out.println("--------" + user.getPromoID());
		PromoEntity promoEntity = promoRepository.findOne(user.getPromoID());
		
		if (bindingResult.hasErrors()) {
			model.addAttribute("ErrorMessage", "Invalid form!");
			return "inscription";
		} else {
			UserEntity userEnt = userService.parseUserViewToUserEntity(user);
			userEnt.setPromoID(promoEntity);
			UserEntity userEntCheck = userService.checkUser(userEnt, userRepository);
			if (userEntCheck == null) {
				userService.saveUser(userEnt, userRepository);
			} else {
				model.addAttribute("ErrorMessage", "User Exist !");
				return "inscription";
			}

			return "redirect:/";
		}
	}
	
	@GetMapping("/edit")
	public String showEditPage(Model model) {
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		UserEntity userEnt = userService.GetUserByEmail(auth.getName(), userRepository);
		UserView userView = userService.parseUserEntityToUserView(userEnt);
		model.addAttribute("user", userView);
		return "editUser";
	}

//	@PostMapping("/edit")
//	public String EditProfileSubmit(Model model, @ModelAttribute @Valid UserView user,
//			BindingResult bindingResult) {
//		
//		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
//		UserEntity u = userService.GetUserByEmail(auth.getName(), userRepository);
//		long puid = u.getPUID();
//		user.setPUID(puid);
//
//		model.addAttribute("user", user);
//		if (bindingResult.hasErrors()) {
//			model.addAttribute("ErrorMessage", "Invalid form!");
//			return "editUser";
//		} else {
//			UserEntity userEnt = userService.parseUserViewToUserEntity(user);
//			System.out.println(user.toString());
//			userService.saveUser(userEnt, userRepository);
//			return "redirect:/";
//		}
//	}
	
	@PostMapping("/edit")
	public String EditProfileSubmit(Model model, @ModelAttribute @Valid UserView user,
			BindingResult bindingResult) {
		
		// Get authenticated user
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		UserEntity u = userService.GetUserByEmail(auth.getName(), userRepository);
		// Set puid in the view
		long puid = u.getPUID();
		user.setPUID(puid);
		model.addAttribute("user", user);
		
		if (bindingResult.hasErrors()) {
			model.addAttribute("ErrorMessage", "Invalid form!");
			return "editUser";
		} else {
			// Done like that because saveUser was not updating the current user
			// but was creating a new user with the infos from the view
			UserEntity editedUser = userService.parseUserViewToUserEntity(user);
			// Currently we can't change the user email
			u.setRole(editedUser.getRole());
			u.setPassword(editedUser.getPassword());
			userService.saveUser(u, userRepository);
			return "redirect:/";
		}
	}

	@GetMapping("/DeleteProfile/{email}")
	public String DeleteUsert(@PathVariable String email, Model model, @ModelAttribute UserView user) {
		// Get user currently authenticated
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		UserEntity u = userService.GetUserByEmail(auth.getName(), userRepository);
		
		SecurityContextHolder.clearContext(); // Close auth session
		UserEntity userEnt = userService.GetUserByEmail(u.getEmail(), userRepository);

		userService.deleteUser(userEnt, userRepository);

		return "redirect:/login";
	}

}
